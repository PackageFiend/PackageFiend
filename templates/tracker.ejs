<!DOCTYPE html>
<html lang='en'>
    <head>
        <meta charset="utf8">
        <link rel="stylesheet" href="http://localhost:8080/styles/tracker.css">
        <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;700&display=swap" rel="stylesheet">        
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" />
		<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
			  integrity="sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs="
			  crossorigin="anonymous"></script>
        <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>
        <script src="https://kit.fontawesome.com/03ce98851b.js" crossorigin="anonymous"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.26.0/moment.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
		<script src="http://localhost:8080/scripts/time.js"></script>
        <title>Package Fiend</title>
    </head>
    <body>
        <header class="header">
            <div class="navbar">
                <div class="track_and_button">                
                    <div class="enter_track">
                        <form class="enter_numbers">
                            <div class="enter_numbers_box">
                                <i class="fas fa-box"></i>
                                <input class="add_in" type="text" placeholder="ADD TRACKING NUMBER(S)" />
                            </div>
                        </form>
                    </div>
                    <div class="add_button">ADD</div> 
                </div>
                <img class="logo" src="http://packagefiend.com/images/PkgFiend_logo.svg">
                <div class="sign_in_box"></div>
            </div>    
        </header>
        <div class="tracker_body">
            <!-- This is the purple bar. Becomes a dropdown if multiple tracking numbers are present. -->
            <div class="collapsible_header">
                <div></div>
                <div class="track_number_title">
					<div class="tracking_number"><%= dat[0].TrackNum %></div>
					<div class="carrier_icon_bold"><%= dat[0].Provider %></div>
                </div>
                <!-- This only appears if multiple tracking numbers are present. -->
                <div class="more_numbers_selector">
                    <p>more</p>
                    <i class="fas fa-caret-down"></i>
                </div>
            </div>
            <!-- This is the dropdown that displays if there are multiple tracking numbers present in the URL -->
            <!-- If there are no extra tracking numbers, it won't display -->
            <div class="collapsible_list">
                <!-- Each of these track_data_line divs represents one of the numbers -->
                <!-- This should automatically select the first number to be selected. It will be changed via JS when switching -->
                
				<% for (let i = 0; i < dat.length; i++) { %>
				<div class=<%- !i ? "'track_data_line tdl_bold'" : 'track_data_line'  %>>
                    <!-- Split into left and right divs for spacing -->                    
                    <div class="data_line_l">
						<p class="data_line_num"><%= dat[i].TrackNum %></p>
						<div class="carrier_icon_bold"><%= dat[i].Provider %></div>
                    </div>
                    <div class="data_line_r">
						<% if (!dat[i].Error) { %>
                        <div class="data_line_status">
							<%= (dat[i].Delivered ? 'Delivered:' : 'In Transit:') %>
						</div>
                        <div class="data_line_delivery_date indv_time"><%- dat[i].MostRecentTime %></div>
						<% } else { %>
                        <div class="data_line_status">
							No Information Yet
						</div>
						<% } %>
                    </div>
                </div>
				<% } %>
			</div>
            <div class="map_and_events">
            
                <div id="map"></div>
            
                <div class="events_data">
                    <div class="est_delivery">
						<% if (!dat[0].Error) { %>
                        <div id="est_delivery_desc" class="bold_body">
							<%= dat[0].Delivered ? 'Delivered:' : 'Est. Delivery:' %>
						</div>
						<div id="est_delivery_time" class="bold_body indv_time"><%- dat[0].MostRecentTime %></div>
						<% } %>
                    </div>
                    <div class="events_data_box">
						<% if (!dat[0].Error) { %>
						<% for (event of dat[0].Events) { %>
                        <div class="line_event_and_date">
                            <div class="event_description">
								<div class="reg_body"><%= event.Description %></div>
                            </div>
							<% if (event.Time) { %>
                            <div class="times">
								<div class="reg_body indv_time">
									<%= event.Time %>
								</div>
                            </div>
							<% } %>
                        </div>
						<% } %>
						<% } else { %>
                        <div class="line_event_and_date">
                            <div class="event_description">
								<div class="reg_body">
                                    No information available.
                                </div>
                            </div>
                        </div>
						<% } %>
                    </div>  
                </div>

            </div>
            
            <div class="travel_time_bar">
                <% if (!dat[0].Error) { %>
                    <% let time_total = 0; %>
                    <% let time_idle = 0; %>
                    <% let time_road = 0; %>
                    <% for (let i = 0; i < dat[0].Travels.length; i++) {
                        const travel = dat[0].Travels[i];
                        let time_taken = Math.round(travel.TimeTaken/3600); 
                        time_total = time_total + time_taken;
                        if (travel.Distance === 0) {
                            time_idle = time_idle + time_taken;
                        } else {
                            time_road = time_road + time_taken;
                        };
                       };
                       //const road_percent = Math.round(time_road*100/time_total);
                       //const idle_percent = Math.round(time_idle*100/time_total);
                       const road_width = 'style="width:' + 756*time_road/time_total + 'px;"';
                       const idle_width = 'style="width:' + (756 - 756*time_road/time_total) + 'px;"';
                       const time_bar_template = `
                       <div class="bar_road_time" ${road_width}><p class="bar_info">Time on Road: ${time_road} hrs</p></div>
                       <div class="white_stripe"></div>
                       <div class="bar_idle_time" ${idle_width}><p class="bar_info">Time at Idle: ${time_idle} hrs</p></div>
                       `;
                       %>
                    <%- time_bar_template %>
                <% } else { %>
                    <div class="bold_body">Travel Time Unknown</div>
                <% } %>
            </div>

            <div class="travel_totals">
                <div class="miles_total">
                    <div class="bold_body">Total Miles Traveled:</div>
                    <div id="total_dist" class="bold_body"><%= dat[0].TotalDistance %> Miles</div>
                </div>
                <div class="time_elapsed_total">
                    <div class="bold_body">Total Time Elapsed:</div>
                    <% if (!dat[0].Error) { %>
                        <% let running_time_total = 0; %>
                        <% for (let i = 0; i < dat[0].Travels.length; i++) {
                            const travel = dat[0].Travels[i];
                            let time_taken = Math.round(travel.TimeTaken/3600); 
                            running_time_total = running_time_total + time_taken;
                           };
                           const time_elapsed_template = `
                            <div id = "total_time" class="bold_body">${running_time_total} hrs</div>
                           `;
                           %>
                        <%- time_elapsed_template %>
                    <% } else { %>
                        <div id = "total_time" class="bold_body">Unknown</div>
                    <% } %>
                </div>
            </div>

       
            <div class="miles_data">
                <div class="location_list">
                    <% if (!dat[0].Error) { %>
                    <% let max_time = 0; %>
                    <% let max_dist = 0; %>
                    <% for (let i = 0; i < dat[0].Travels.length; i++) {
                        const travel = dat[0].Travels[i];
                        if (travel.Distance > max_dist) {
                            max_dist = travel.Distance;
                        };
                        if (travel.TimeTaken > max_time) {
                            max_time = travel.TimeTaken;
                        };
                    %>
                    <% }; %>
                    <% max_time = Math.round(max_time/3600); %>
                    <% for (let i = 0; i < dat[0].Travels.length; i++) {
                        const travel = dat[0].Travels[i];
                        let startLocation = travel.From;
                        let endLocation = '-> ' + travel.To;

                        if (travel.From === travel.To) {
                            endLocation = "";
                        };
                        let time_taken = Math.round(travel.TimeTaken/3600);
                        let dist_width = travel.Distance * 353 / dat[0].TotalDistance;
                        let time_width = time_taken * 353 / 17;
                                
                        const dist_bar = '<div class="distance_bar" style="width:' + dist_width + 'px;"></div>';
                        const time_bar = '<div class="time_bar" style="width:' + time_width + 'px;"></div>'
                        const mBoxTemplate = `
                            <div class="place_and_distance">
                                <div class="place_description">
                                    <div class="tight_text_l">${startLocation}</div>
                                    <div class="tight_text_l">${endLocation}</div>
                                </div>
                                <div class="distance_time">
                                    <div class="tight_text_r">${travel.Distance ? travel.Distance + " miles" : "Idle"}</div>
                                    <div class="tight_text_r">${time_taken} hrs</div>
                                </div>
                                <div class="graph_box">
                                    ${dist_bar}
                                    ${time_bar}
                                </div>
                            </div>
                            `;
                        %>
                        <%- mBoxTemplate %>
                        <% } %>
                        <% } else { %>
                        <div class="line_event_and_date">
                            <div class="place_description">
                            <div class="reg_body">Time and location data not available.</div>
                            </div>
                        </div>
                        <% } %>
                </div>
            </div>
                
            
            </div>
        </div>
        <footer class="footer">
            <div id="bottom_line"></div>
            <div class="footer_div">
                <div></div>
                <div class="holberton">
                    <img class="holb_logo" src="http://packagefiend.com/images/holb_logo_black.svg">
                    <p>Holberton School</p>
                </div>
                <p id="footer_link">Privacy</p>
            </div>
        </footer>
    </body>
	<script type="text/javascript" src="http://localhost:8080/scripts/tracker.js"></script>
	<script type="text/javascript">
		let latlngs = [];
		<% if (!dat[0].Error) { %>
		<% for (event of dat[0].Events) { %>
			<% if (event.Location.Geo !== null && event.Location.Geo !== undefined) { %>
				L.marker([<%= event.Location.Geo.lat %>, <%= event.Location.Geo.lng %>]).addTo(mymap);
				latlngs.push([<%= event.Location.Geo.lat %>, <%= event.Location.Geo.lng %>]);
			<% } %>
		<% } %>
		<% } %>
		const pline = L.polyline(latlngs);
		pline.addTo(mymap);

		<% if (!dat[0].Error) { %>
		mymap.fitBounds(pline.getBounds(), {padding: [25, 25]});
		<% } %>

		const data = <%- JSON.stringify(dat, null, 0) %>;
	</script>
</html>
